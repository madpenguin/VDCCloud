#!/usr/bin/python
#
#	fc_gluster - service control routines
#
#	Mad Pengiun <madpenguin@linux.co.uk> (c) 2012
#
#	TODO:: convert /etc/fc_gluster into a persistent mapping
#	TODO:: modprobe for flashcache and nbd @ start
#	TODO:: fix auto-boot on node1 and node2 re; mount gluster
# 	TODO:: submit patches for FC re; more stats info
#	TODO:: hive off code into Library
#
###############################################################################
#
#	External Routines and Constants
#
###############################################################################
#
import sys
import socket
import subprocess as sub
import os
import stat
import time
import shelve
import libvirt
import datetime
import pymongo
from datetime import datetime
#
#	Useful constants from libvirt
#
from libvirt import VIR_MIGRATE_LIVE		# make migrations "live"
from libvirt import VIR_MIGRATE_PEER2PEER	# migrate directly, !via libirt
from libvirt import VIR_MIGRATE_PERSIST_DEST	# make the result persistent
from libvirt import VIR_MIGRATE_UNDEFINE_SOURCE	# remove froms src on completion
from libvirt import VIR_DOMAIN_RUNNING		# is domain running on this node
#
#	Our Code Libraries
#
from fc_cloud import Database 
#
#	Handy shortcuts
#
from sys 	import argv,exit
from termcolor 	import colored
#
#	Local Constants
#
CONFIG_DIR 	= '/etc/fc_gluster/'
DATABASE 	= '/etc/flashcache.dbm'
HOSTNAME 	= os.uname()[1]
FALLOW_DELAY 	= 300
MAX_BLOCK	= 64				# max NBD devices we're going to allow
#
sys.path.append(CONFIG_DIR)	# TODO:: remove!
#
mdb = Database()
#
###############################################################################
#
def isKVMRunning(io,inst):

	active = []
	for id in io.listDomainsID():
		domain = io.lookupByID(id)
		info = domain.info()
		if info[0] == VIR_DOMAIN_RUNNING: active.append(domain.name())
	return inst in active
#
###############################################################################
#
def getDomain(io,inst):
	active = []
	for id in io.listDomainsID():
		domain = io.lookupByID(id)
		if domain.name() == inst: return domain
	return None
#
###############################################################################
#
def delay(secs):
	while secs > 0:
		logMiddle(secs,blue)
		time.sleep(10)
		secs -= 10
#
###############################################################################
#
def getInstances():
	""" return the names of the instances to process """
	if len(argv)>2:	return argv[2:]
	else:
		instances = []
		results = mdb.getInstances(HOSTNAME)
		for result in results:
			instances.append(result['name'])
		return instances
#
###############################################################################
#
def doLoad(inst):
	""" load the dynamic configuration for a given instance """
	try:
		config = __import__(inst)
	except ImportError:
		print "No configuration for ",inst
		exit(1)
	return config
#
###############################################################################
#
def logBegin(text,name=''):
	""" start logging a line to stdout """
	print colored("*","blue"),
	print colored(text,"green"),
	if name <> '': print colored(name,"yellow"),
	sys.stdout.flush()
#
###############################################################################
#
def logEnd(text,ok):
	""" stop logging and print a status message """
	if ok:
		color = "green"
	else:	color = "red"
	print "["+colored(text,color)+"]"
#
###############################################################################
#
def logMiddle(text,col):
	print "["+colored(text,col)+"]",
	sys.stdout.flush()
#
###############################################################################
#
def logYN(text):
	while True:
		logBegin(text+colored(" (y/N) ",yellow))
		choice = raw_input().lower()
		if not choice in ['y','N','']: continue
		if choice == 'y': return True
		return False

def logError(text,name):
	""" standard format for error display """
	print " "+colored("*","blue"),
	print colored(text,"green"),
	print "["+colored(name,"red")+"]"
#
###############################################################################
#
def isRunning(inst):
	return os.path.exists("/dev/mapper/"+inst)
#
###############################################################################
#	
def setParam(inst,dev,param,v):
	""" set a flashcache parameter """
	path = "/proc/sys/dev/flashcache/"+inst['name']+"+"+dev+"/"+param
	if os.path.exists(path):
		print "["+colored(param,"yellow")+"="+colored(v,"green")+"]",
		io = open(path,"w")
		io.write(str(v)+"\n")
		io.close()
#
###############################################################################
#	
def run(cmd):
	""" run a shell command in a sub-shell """
	pipe = sub.Popen(cmd,bufsize=8192,stdout=sub.PIPE,stderr=sub.PIPE,shell=True)
	result = pipe.communicate()
	return pipe.returncode
#
def remote(cmd):
	""" run a shell command in a sub-shell """
	pipe = sub.Popen(cmd,bufsize=8192,stdout=sub.PIPE,stderr=sub.PIPE,shell=True)
	result = pipe.communicate()
	return [pipe.returncode,result]
#
###############################################################################
#
#	do_stats - print out our current status in tabular format
#
def do_stats():
	""" print out our status in tabular format """
	print "+"+25*"-"+"+"+7*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*'-'+'+'
	print "| %s %s" % (colored("%-14s" % "Instance"	,"blue"),colored("%8s" % "Size ","green")),
	print "| %s" 	%  colored("%-5s"  % "Raw"	,"blue"),
	print "| %s" 	%  colored("%15s"  % "Cached"	,"blue"),
	print "| %s" 	%  colored("%15s"  % "Dirty"	,"blue"),
	print "| %s"	%  colored("%15s"  % "Read"	,"blue"),
	print "| %s"	%  colored("%15s"  % "write"	,"blue")+" |"
	print "+"+25*"-"+"+"+7*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*'-'+'+'
	for inst in mdb.getInstances(HOSTNAME):
		name = inst['name']
		ssd = "/dev/%s/%s" % (inst['vol_group'],name)
		dev = mdb.getDevice(HOSTNAME,name)

		if not isRunning(name):
			print "| %s (%s) |" % (colored("%-14s" % name,"blue"),colored("%6s" % "down","red")),
			print 6*" "+"|"+17*" "+"|"+17*" "+"|"+17*' '+'|'+17*' '+'|'
			continue

		stats = ""
		if dev:
			path = "/proc/flashcache/"+name+"+"+dev+"/flashcache_stats"
			if os.path.exists(path): 
				io = open(path,"r")
				stats = io.read()
				io.close()

		cmd = "dmsetup table %s" % name
		pipe = sub.Popen(cmd,bufsize=8192,stdout=sub.PIPE,stderr=sub.PIPE,shell=True)
		result = pipe.communicate()
		if pipe.returncode:
			print "* FAILURE RUNNING DMSETUP for %s" % name
			sys.exit(0)

		result = result[0]
		result = result.expandtabs(0).split("\n")
		record = result[1].split(",")
		ssd = record[0].split("(")[1].replace(")","")
		aoe = record[1].split("(")[1].replace(")","").split(" ")[0]
		record = result[2].split(",")
		capacity = record[0].split("(")[1].replace(")","")
		record  = result[3].split(",")
		try:
			cached  = int(record[1].split("(")[1].replace(")",""))
			percent = int(record[2].split("(")[1].replace(")",""))
			record  = result[4].split(",")
			dirtyb = int(record[0].split("(")[1].replace(")",""))
			dirtyp = int(record[1].split("(")[1].replace(")",""))
		except:
			record  = result[4].split(",")
			cached  = int(record[1].split("(")[1].replace(")",""))
			percent = int(record[2].split("(")[1].replace(")",""))
			record  = result[5].split(",")
			dirtyb = int(record[0].split("(")[1].replace(")",""))
			dirtyp = int(record[1].split("(")[1].replace(")",""))

		stats = stats.replace("\n"," ")
		stats = stats.split(" ")
		for stat in stats:
			if len(stat)<2: continue
			key,val = stat.split("=")
			if key == 'ssd_reads'	: ssd_reads = int(val)
			if key == 'disk_reads'	: disk_reads = int(val)
			if key == 'ssd_writes'	: ssd_writes = int(val)
			if key == 'disk_writes'	: disk_writes = int(val)			

		total_reads = ssd_reads + disk_reads + 1
		rp = int(100 * float(ssd_reads) / float(total_reads))
		total_writes = ssd_writes + disk_writes + 1
		wp = int(100 * float(ssd_writes) / float(total_writes))

		print "| %s (%s)"   % (colored("%-14s" 	% name,"green"),colored("%6s" % capacity,"yellow")),
		print "| %s" 	    %  colored("%-5s" 	% dev,"green"),
		print "| %s (%s)"   % (colored("%8d" 	% cached,"green"),	colored("%3d%%" % percent,"yellow")),
		print "| %s (%s)"   % (colored("%8d" 	% dirtyb,"green"),	colored("%3d%%" % dirtyp,"yellow")),
		print "| %s (%s)"   % (colored("%8d" 	% total_reads,"green"),	colored("%3d%%" % rp,"yellow")),
		print "| %s (%s) |" % (colored("%8d" 	% total_writes,"green"),colored("%3d%%" % wp,"yellow"))

	print "+"+25*"-"+"+"+7*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*"-"+"+"+17*'-'+'+'
#
###############################################################################
#
#	do_stop - stop a given instance
#
def do_stop(remove=False):
	""" stop one or more instances """
	for name in getInstances():	
		inst = mdb.getInstance(HOSTNAME,name)
		if not inst:
			logError('Instance does not exist on this node',name)
			continue

		if not isRunning(name):
			logError('Instance is already stopped',name)
			continue
		
		dev = mdb.getDevice(HOSTNAME,name)
		if not dev:
			logError('No device known for',name)
			continue
			
		logBegin('Stopping',name)			
		ssd = "/dev/%s/%s" % (inst['vol_group'],name)		
		
		if run("/sbin/dmsetup remove %s" % name):
			logEnd('dmsetup Failed',False)
		else: 	
			logMiddle('dm stopped',"green")
			if run("qemu-nbd -d /dev/"+dev):
				logMiddle(dev,"red")
				logEnd('Fail',False)
			else:	
				logMiddle(dev,"blue")
				setParam(inst,dev,"do_sync",1)
				if not remove:
					logEnd('Ok',True)
				else:
					logMiddle('remove','blue')
					if run("lvremove -f "+ssd):
						logEnd('Fail',False)
					else:
						mdb.delDevice(HOSTNAME,name)
						logEnd('Ok',True)
#
###############################################################################
#
def do_start():
	""" start one or more instances """
	for name in getInstances():	
		inst = mdb.getInstance(HOSTNAME,name)
		if not inst:
			logError('Instance does not exist on this node',name)
			continue

		if isRunning(name):
			logError('Instance is already running',name)
			continue 
				
		img = "/"+inst['path']+"/"+name+".img"
		if not os.path.exists(img):
			logEnd('missing: '+img,False)
			continue

		ssd = "/dev/%s/%s" % (inst['vol_group'],name)
		
		logBegin('Starting',name)			
		
		dev = mdb.getDevice(HOSTNAME,name)
		if dev:
			logMiddle('old::'+dev,"blue")
		else:
			dev = mdb.getNextDevice()
			logMiddle('new::'+dev,"green")
			mdb.updateDevice(HOSTNAME,name,dev)
			
		if run("qemu-nbd -c /dev/"+dev+" "+img):	
			logEnd(dev,Fail)
			continue

		logMiddle("connect","blue")

		if os.path.exists(ssd):
			logMiddle('load',"blue")
			if run("/sbin/flashcache_load "+ssd+" "+name):
				logEnd('fail',False)
				continue
		else:
			logMiddle('lvm',"blue")
			if run("lvcreate -L%dG -n%s %s" % (inst['cache_size'],name,inst['vol_group'])):
				logEnd('fail',False)
				continue
			
			logMiddle('ndb',"blue")
			if run("/sbin/flashcache_create -p back -s%dg %s %s /dev/%s" % (inst['cache_size'],name,ssd,dev)):
				logEnd('fail',False)
				continue

		logMiddle('RA::8192',"blue")
		if run("blockdev --setra 8192 /dev/mapper/"+name): logMiddle('fail',"red")
		setParam(inst,dev,"reclaim_policy",1)
		setParam(inst,dev,"fallow_delay",FALLOW_DELAY)
		logEnd('Ok',"green")
#
###############################################################################
#
def do_migrate(pingpong=False):
	""" migrate a running instance from one machine to another """
	#
	#	Params: instance dst
	#
	if len(argv)<4:
		logBegin('Migration needs <instance> and <destination>')
		logEnd('Fail',False)
		return

	inst = sys.argv[2]
	dest = sys.argv[3]

	logBegin('Validating source')
	src_conn = libvirt.open("qemu:///system")

	if not isKVMRunning(src_conn,inst):
		if not pingpong:
			logMiddle('Instance is not running',"blue")
			logEnd('Fail',False)
			return

		logEnd('Ok',True)

		while True:
			logBegin('Waiting to see instance')
			if isKVMRunning(src_conn,inst): 
				delay(10)
				break
			delay(40)
			logEnd('Not found',True)

	logEnd('Ok',True)

	logBegin('Validating destination')
	dst_conn = libvirt.open("qemu+ssh://"+dest+"/system")
	if isKVMRunning(dst_conn,inst):
		logMiddle('Instance is already running',"blue")
		logEnd('Fail',False)
		return

	logEnd('Ok',True)

	logBegin('Turning caching off on source')
	config = doLoad(inst)
	config.ssd,config.dev = db[inst]
	setParam(inst,config,'cache_all',0)
	setParam(inst,config,"do_sync",1)
	logEnd('Ok',True)

	logBegin('Checking mapper on %s' % dest)
	blockdev = "/dev/mapper/"+inst

	status,result = remote('ssh root@'+dest+' "if [ -e '+blockdev+' ]; then echo -n 1; else echo -n 0; fi"')
	if status:
		logEnd(result,False)
		return

	logEnd('Ok',True)

	if result[0]=='1':
		yn = logYN('Mapper exists on target, remove?')
		if not yn:
			logBegin('Aborting procedure')
			logEnd('Fail',False);
			return

		logBegin('Shutting down Mapper on %s' % dest)
		status,result = remote('ssh root@'+dest+' "service fc_gluster remove '+inst+'"')
		if status:
			logEnd('Failed',False)
			print result
			return
	
		logEnd('Ok',True)

	logBegin('Creating Mapper on %s' % dest)
	status,result = remote('ssh root@'+dest+' "service fc_gluster start '+inst+'"')
	if status:
		logEnd('Failed',False)
		print result
		return
	
	logEnd('Ok',True)

	logBegin('Waiting for Dirty Blocks => 0')
	while True:
		cmd = "dmsetup table %s" % inst
		pipe = sub.Popen(cmd,bufsize=8192,stdout=sub.PIPE,stderr=sub.PIPE,shell=True)
		result = pipe.communicate()
		if pipe.returncode:
			print " * - FAILURE RUNNING DMSETUP for %s" % inst
			exit(0)
	
		result = result[0]
		result = result.expandtabs(0).split("\n")
		record = result[1].split(",")
		ssd = record[0].split("(")[1].replace(")","")
		aoe = record[1].split("(")[1].replace(")","").split(" ")[0]
		record = result[2].split(",")
		capacity = record[0].split("(")[1].replace(")","")
		record  = result[3].split(",")
		try:
			cached  = int(record[1].split("(")[1].replace(")",""))
			percent = int(record[2].split("(")[1].replace(")",""))
			record  = result[4].split(",")
			dirtyb = int(record[0].split("(")[1].replace(")",""))
			dirtyp = int(record[1].split("(")[1].replace(")",""))
		except:
			record  = result[4].split(",")
			cached  = int(record[1].split("(")[1].replace(")",""))
			percent = int(record[2].split("(")[1].replace(")",""))
			record  = result[5].split(",")
			dirtyb = int(record[0].split("(")[1].replace(")",""))
			dirtyp = int(record[1].split("(")[1].replace(")",""))

		if dirtyb == 0: 
			logEnd('Ok',True)
			break

		logMiddle('wait',"blue")
		setParam(inst,config,"do_sync",1)
		time.sleep(1)

	logBegin('Waiting')
	delay(10)
	logEnd('Ok',True)

	logBegin('Migrating %s to %s' % inst,dest)

	flags = VIR_MIGRATE_LIVE|VIR_MIGRATE_PEER2PEER|VIR_MIGRATE_PERSIST_DEST|VIR_MIGRATE_UNDEFINE_SOURCE
	uri = "qemu+ssh://%s/system" % (dest)
	src = getDomain(src_conn,inst)

	dst = src.migrate(dst_conn,flags,inst,uri,0)

	if not dst:
		logEnd('Failed',False)
		print result
		return
	
	logEnd('Ok',True)

	if not pingpong:
		yn = logYN('Are we Ok to remove the local Mapper?')
		if not yn:
			logBegin('Aborting procedure')
			logEnd('Fail',False);
			return

	logBegin('Shutting down obsolete Mapper')
	if run('service fc_gluster remove '+inst):
		logEnd('Failed',False)
		print result
		return
	
	logEnd('Ok',True)

	logBegin('Turning cache back on')
	status,result = remote('ssh root@'+dest+' "service fc_gluster cacheon '+inst+'"')
	if status:
		logEnd('Failed',False)
		print result
		return
	
	logEnd('Ok',True)
#
###############################################################################
#
def do_pingpong():
	while True:
		logBegin("Sleeping")
		delay(20)
		logEnd("Ok",True)
		print
		do_migrate(pingpong=True)
#
###############################################################################
#
#	setParameters - cycle through the chosen instances and set given parameters
#
def setParameters(intro,param):
	""" set specific parameters based on command line list """
	for name in getInstances():	
		if not isRunning(name):
			logError('Instance is not running',name)
			continue
		inst = mdb.getInstance(HOSTNAME,name)
		if not inst:
			logError('Instance does not exist on this node',name)
			continue
				
		dev = mdb.getDevice(HOSTNAME,name)
		if not dev:
			logError('No NBD device registered for',name)
			continue
			
		logBegin(intro,name)
		logMiddle(dev,'blue')
		for key in param.keys():
			val = param[key]
			setParam(inst,dev,key,val)
		logEnd('Ok',True)		
#
###############################################################################
#
#	Generic routines to change system bahaviour
#
def do_sync():		setParameters('Synchronizing',{"fallow_delay":FALLOW_DELAY,'do_sync':1})
def do_nosync():	setParameters('Synchronizing',{"fallow_delay":0})
def do_cacheon():	setParameters('Enabling Cache',{"cache_all":1,"do_sync":1,"reclaim_policy":1})
def do_cacheoff():	setParameters('Enabling Cache',{"cache_all":0,"do_sync":1,"reclaim_policy":1})
def do_clearstats():	setParameters('Enabling Cache',{"zero_stats":1})
def do_remove():	do_stop(remove=True)
#
###############################################################################
#
#	All possible entry points for the routine
#
routines = {
	'sync'		:do_sync,
	'nosync'	:do_nosync,
	'cacheon'	:do_cacheon,
	'cacheoff'	:do_cacheoff,
	'clearstats'	:do_clearstats,
	'remove'	:do_remove,
	#
	'stats'		:do_stats,
	'stop' 		:do_stop,
	'start'		:do_start,
	'migrate'	:do_migrate,
	'pingpong'	:do_pingpong,
}
#
#	Display a list of possible command (dynamic)
#
def do_usage():
	s = ''
	for routine in routines.keys():
		if s <> '': s+='|'
		s += routine
	print 'service fc_gluster [%s]' % s
#
#	This is the main command parser
#
if len(argv)<2:
	cmd = ""
else:	cmd = argv[1]

if cmd in routines:
	routines[cmd]()
else:	do_usage()